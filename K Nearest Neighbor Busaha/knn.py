# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PGxmz3gNMxiAXjmM0Rm0-3dQvipnI67r

# **Load Module**
"""

import pandas as pd 
import numpy as np
import sklearn 
df = pd.read_csv('https://raw.githubusercontent.com/donatkukus/data/main/df31.csv')

sklearn.__version__

"""# **Drop Unusable Label**"""

# df = df[df.jenis_usaha != ['Transportasi','Toko Buah','Penggilingan','Alat Kecantikan','Koleksi','Alat kesehatan','Perseroan Komanditer','Jasa Isi Ulang Air Minum','Jasa Mengajar','Fotocopy']]


drop_label =  ['Transportasi','Toko Buah','Penggilingan','Alat Kecantikan','Koleksi','Alat kesehatan','Perseroan Komanditer','Jasa Isi Ulang Air Minum','Jasa Mengajar','Fotocopy']
for drop in drop_label:
  df = df[df.jenis_usaha != drop]

df['jenis_usaha'].value_counts()

df.head()

#Drop unusable columns
df = df.drop(columns=['Unnamed: 0','Modal','tingkat_persaingan','jumlah_pegawai','omset',
                      'target_pasar','lokasi','hewan_ternak','hewan_ternak_sub','lokasi_geografis',
                      'mengerti_hewan','luas_lahan','usaha_kuliner','tipe_usaha_kuliner','kemampuan_masak',
                      'barang_dropship','penyimpanan_barang','biaya_internet','sosial_media','barang_toserba',
                      'toko_toserba','tipe_toko','usaha_lain','tipe_usaha_lain'])

df

"""# **LABEL ENCODING**"""

from sklearn import preprocessing



#Encode 'jenis_usaha' class
encoder = preprocessing.LabelEncoder()
encoder.fit(df.jenis_usaha)
df['jenis_usaha'] = encoder.transform(df.jenis_usaha)

#Make a mapping of label encoder

classes = dict(zip(encoder.transform(encoder.classes_), encoder.classes_  ))

classes

label = df['jenis_usaha']
label = label.to_frame(name = 'jenis_usaha')

#Drop encoded labels from the main dataframe
df = df.drop('jenis_usaha', axis = 1)

df.head()

"""# **Normalize Large Value**"""

def normalize(df):
  df = (df-df.min())/(df.max()-df.min())
  return df

df['modal_maximum'] = normalize(df['modal_maximum'])

df['modal_minimum'] = normalize(df['modal_minimum'])

df['omset_minimum'] = normalize(df['omset_minimum'])

df.head()

"""# **Split Train and Test data**"""

#Split train - test
from sklearn.model_selection import train_test_split
data = df.to_numpy()
label = label.to_numpy()



data_train, data_test, label_train, label_test = train_test_split(data, label, test_size = 0.2, random_state = 42)

print(data_train.shape)
print(data_test.shape)

label_train = label_train.flatten()
label_test = label_test.flatten()
print(label_train.shape)
print(label_test.shape)

"""# **KNN**"""

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt

model = KNeighborsClassifier(n_neighbors=2)

model.fit(data_train, label_train)

predict = model.predict(data_test)

print("Prediction : ",predict)
print("Actual label : ",label_test)

from sklearn import metrics

print("accuracy : ", metrics.accuracy_score(predict, label_test))

"""# Visualize KNN model through every K possible """

# K will be in between 1 to 8 since we have 8 class
K = range(1,9)


accuracies_list = []

for k in K:
  model2 = KNeighborsClassifier(n_neighbors=k)
  model2.fit(data_train, label_train)
  predictions = model2.predict(data_test)
  accuracies_list.append(metrics.accuracy_score(predictions, label_test))

plt.plot(K,accuracies_list)
plt.xlabel('K value')
plt.ylabel('Accuracy')

"""# Prediction"""

#Prediction for peternakan
predict = model.predict(df.iloc[[0]].to_numpy())
classes[predict[0]]

#Prediction for kuliner
predict = model.predict(df.iloc[[2]].to_numpy())
classes[predict[0]]

#Prediction for toserba
predict = model.predict(df.iloc[[1]].to_numpy())
classes[predict[0]]

"""# **Saving KNN model**"""

import joblib

joblib.dump(model, 'ModelKnn.pkl')

model_loaded = joblib.load('ModelKnn.pkl')


classes[model_loaded.predict(df.iloc[[1]].to_numpy())[0]]